(function() {var implementors = {
"cerebral":[["impl Freeze for <a class=\"struct\" href=\"cerebral/neural/struct.NeuralLayer.html\" title=\"struct cerebral::neural::NeuralLayer\">NeuralLayer</a>",1,["cerebral::neural::NeuralLayer"]],["impl&lt;A, T, R, L&gt; Freeze for <a class=\"struct\" href=\"cerebral/selforganizing/struct.SelforganizingNetwork.html\" title=\"struct cerebral::selforganizing::SelforganizingNetwork\">SelforganizingNetwork</a>&lt;A, T, R, L&gt;<span class=\"where fmt-newline\">where\n    A: Freeze,\n    L: Freeze,\n    R: Freeze,\n    T: Freeze,</span>",1,["cerebral::selforganizing::SelforganizingNetwork"]],["impl Freeze for <a class=\"struct\" href=\"cerebral/adaptable/kohonen/struct.KohonenAdaptivity.html\" title=\"struct cerebral::adaptable::kohonen::KohonenAdaptivity\">KohonenAdaptivity</a>",1,["cerebral::adaptable::kohonen::KohonenAdaptivity"]],["impl Freeze for <a class=\"struct\" href=\"cerebral/responsive/struct.CartesianResponsiveness.html\" title=\"struct cerebral::responsive::CartesianResponsiveness\">CartesianResponsiveness</a>",1,["cerebral::responsive::CartesianResponsiveness"]],["impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"cerebral/topological/struct.CartesianTopology.html\" title=\"struct cerebral::topological::CartesianTopology\">CartesianTopology</a>&lt;D&gt;<span class=\"where fmt-newline\">where\n    D: Freeze,</span>",1,["cerebral::topological::CartesianTopology"]],["impl Freeze for <a class=\"struct\" href=\"cerebral/trainable/struct.IncrementalLearning.html\" title=\"struct cerebral::trainable::IncrementalLearning\">IncrementalLearning</a>",1,["cerebral::trainable::IncrementalLearning"]],["impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"cerebral/nd_tools/ndindex/struct.NdIndexIterator.html\" title=\"struct cerebral::nd_tools::ndindex::NdIndexIterator\">NdIndexIterator</a>&lt;D&gt;<span class=\"where fmt-newline\">where\n    D: Freeze,</span>",1,["cerebral::nd_tools::ndindex::NdIndexIterator"]]],
"potpourri":[["impl Freeze for <a class=\"struct\" href=\"potpourri/backend/ndarray/finite/struct.Finite.html\" title=\"struct potpourri::backend::ndarray::finite::Finite\">Finite</a>",1,["potpourri::backend::ndarray::finite::Finite"]],["impl Freeze for <a class=\"struct\" href=\"potpourri/backend/ndarray/gaussian/struct.Gaussian.html\" title=\"struct potpourri::backend::ndarray::gaussian::Gaussian\">Gaussian</a>",1,["potpourri::backend::ndarray::gaussian::Gaussian"]],["impl Freeze for <a class=\"struct\" href=\"potpourri/backend/ndarray/kmeans/struct.KMeans.html\" title=\"struct potpourri::backend::ndarray::kmeans::KMeans\">KMeans</a>",1,["potpourri::backend::ndarray::kmeans::KMeans"]],["impl Freeze for <a class=\"struct\" href=\"potpourri/backend/ndarray/linear/struct.Linear.html\" title=\"struct potpourri::backend::ndarray::linear::Linear\">Linear</a>",1,["potpourri::backend::ndarray::linear::Linear"]],["impl Freeze for <a class=\"struct\" href=\"potpourri/backend/ndarray/som/struct.SOM.html\" title=\"struct potpourri::backend::ndarray::som::SOM\">SOM</a>",1,["potpourri::backend::ndarray::som::SOM"]],["impl Freeze for <a class=\"enum\" href=\"potpourri/errors/enum.Error.html\" title=\"enum potpourri::errors::Error\">Error</a>",1,["potpourri::errors::Error"]],["impl&lt;T, L&gt; Freeze for <a class=\"struct\" href=\"potpourri/mixture/struct.Mixture.html\" title=\"struct potpourri::mixture::Mixture\">Mixture</a>&lt;T, L&gt;<span class=\"where fmt-newline\">where\n    L: Freeze,\n    T: Freeze,</span>",1,["potpourri::mixture::Mixture"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"potpourri/model/struct.Model.html\" title=\"struct potpourri::model::Model\">Model</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["potpourri::model::Model"]],["impl Freeze for <a class=\"struct\" href=\"potpourri/model/struct.ModelInfo.html\" title=\"struct potpourri::model::ModelInfo\">ModelInfo</a>",1,["potpourri::model::ModelInfo"]],["impl Freeze for <a class=\"struct\" href=\"potpourri/struct.AvgLLH.html\" title=\"struct potpourri::AvgLLH\">AvgLLH</a>",1,["potpourri::AvgLLH"]]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()